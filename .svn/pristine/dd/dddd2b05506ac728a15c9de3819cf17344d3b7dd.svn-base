package spec.benchmarks.xml.pt.transform;//####[7]####
//####[7]####
import java.io.File;//####[9]####
import java.io.FileInputStream;//####[10]####
import java.io.IOException;//####[11]####
import javax.xml.parsers.ParserConfigurationException;//####[13]####
import javax.xml.transform.Source;//####[14]####
import javax.xml.transform.Templates;//####[15]####
import javax.xml.transform.Transformer;//####[16]####
import javax.xml.transform.TransformerConfigurationException;//####[17]####
import javax.xml.transform.TransformerException;//####[18]####
import javax.xml.transform.TransformerFactory;//####[19]####
import javax.xml.transform.stream.StreamResult;//####[20]####
import javax.xml.transform.sax.SAXSource;//####[21]####
import javax.xml.transform.dom.DOMSource;//####[22]####
import org.xml.sax.SAXException;//####[23]####
import spec.benchmarks.xml.pt.XMLBenchmark;//####[25]####
import spec.harness.Constants;//####[26]####
import spec.harness.Context;//####[27]####
import spec.harness.Launch;//####[28]####
import spec.harness.Util;//####[29]####
import spec.harness.results.BenchmarkResult;//####[30]####
import spec.io.FileCache;//####[31]####
import java.util.Properties;//####[32]####
import spec.io.FileCache.CachedFile;//####[33]####
//####[33]####
//-- ParaTask related imports//####[33]####
import pt.runtime.*;//####[33]####
import java.util.concurrent.ExecutionException;//####[33]####
import java.util.concurrent.locks.*;//####[33]####
import java.lang.reflect.*;//####[33]####
import pt.runtime.GuiThread;//####[33]####
import java.util.concurrent.BlockingQueue;//####[33]####
import java.util.ArrayList;//####[33]####
import java.util.List;//####[33]####
//####[33]####
public class Main extends XMLBenchmark {//####[35]####
    static{ParaTask.init();}//####[35]####
    /*  ParaTask helper method to access private/protected slots *///####[35]####
    public void __pt__accessPrivateSlot(Method m, Object instance, TaskID arg, Object interResult ) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {//####[35]####
        if (m.getParameterTypes().length == 0)//####[35]####
            m.invoke(instance);//####[35]####
        else if ((m.getParameterTypes().length == 1))//####[35]####
            m.invoke(instance, arg);//####[35]####
        else //####[35]####
            m.invoke(instance, arg, interResult);//####[35]####
    }//####[35]####
//####[36]####
    private static final int LONG_VALIDATION_MODE = 0;//####[36]####
//####[37]####
    private static final int SHORT_VALIDATION_MODE = 1;//####[37]####
//####[38]####
    private static final int SINGLE_LOOP_MODE = 0;//####[38]####
//####[39]####
    private static final int MULTIPLE_LOOP_MODE = 1;//####[39]####
//####[40]####
    private static final int INPUT_PAIR = 10;//####[40]####
//####[41]####
    private static final String CONTROL_FILE_NAME = "transformations.properties";//####[41]####
//####[42]####
    static String OUT_DIR = "xml_out";//####[42]####
//####[43]####
    private static int THREADSNUM = 10;//####[43]####
//####[45]####
    private static final String[] XML_NAMES = { "chess-fo/Kasparov-Karpov.xml", "jenitennison/index.xml", "jenitennison/text.xml", "nitf/nitf-fishing.xml", "shared/REC-xml-19980210.xml", "recipes/recipes.xml", "dsd/article.xml", "renderx/chess/Kasparov-Karpov.xml", "renderx/examples/balance/balance_sheet.xml", "renderx/examples/meeting/meeting_minutes.xml" };//####[45]####
//####[58]####
    private static final String[] XSL_NAMES = { "chess-fo/chess.xsl", "jenitennison/page.xsl", "jenitennison/markup.xsl", "nitf/nitf-stylized.xsl", "spec-html/xmlspec.xsl", "recipes/recipes.xsl", "dsd/article2html.xsl", "renderx/chess/chess.xsl", "renderx/examples/balance/balance_sheet.xsl", "renderx/examples/meeting/meeting_minutes.xsl" };//####[58]####
//####[89]####
    private static final int[] loops = { 2, 18, 31, 34, 1, 10, 12, 3, 11, 23 };//####[89]####
//####[102]####
    private static FileCache.CachedFile[] xmlInput;//####[102]####
//####[103]####
    private static FileCache.CachedFile[] xslInput;//####[103]####
//####[104]####
    private static int validationMode = LONG_VALIDATION_MODE;//####[104]####
//####[105]####
    private static int loopMode = SINGLE_LOOP_MODE;//####[105]####
//####[106]####
    private static Properties longValidationProperties;//####[106]####
//####[107]####
    private static Properties[][][] shortValidationProperties;//####[107]####
//####[108]####
    private static String validationFileName;//####[108]####
//####[109]####
    private static Transformer[][][] allTransformers;//####[109]####
//####[110]####
    private int threadId;//####[110]####
//####[112]####
    private static void setValidationMode(int mode) {//####[112]####
        validationMode = mode;//####[113]####
    }//####[114]####
//####[116]####
    private static int getValidationMode() {//####[116]####
        return validationMode;//####[117]####
    }//####[118]####
//####[120]####
    private static void setLoopMode(int mode) {//####[120]####
        loopMode = mode;//####[121]####
    }//####[122]####
//####[124]####
    private static int getLoopMode() {//####[124]####
        return loopMode;//####[125]####
    }//####[126]####
//####[128]####
    public static String testType() {//####[128]####
        return MULTI;//####[129]####
    }//####[130]####
//####[132]####
    private void setXMLSaxName() {//####[132]####
    }//####[134]####
//####[136]####
    public static void setupBenchmark() {//####[136]####
        String tmpName = Util.getProperty(Constants.XML_TRANSFORM_OUT_DIR_PROP, null);//####[137]####
        OUT_DIR = tmpName != null ? tmpName : OUT_DIR;//####[138]####
        File file = new File(OUT_DIR);//####[139]####
        validationFileName = getFullName(Main.class, null, CONTROL_FILE_NAME);//####[140]####
        xmlInput = new FileCache.CachedFile[INPUT_PAIR];//####[141]####
        xslInput = new FileCache.CachedFile[INPUT_PAIR];//####[142]####
        for (int i = 0; i < INPUT_PAIR; i++) //####[143]####
        {//####[143]####
            xmlInput[i] = getCachedFile(Main.class, null, XML_NAMES[i]);//####[144]####
            xslInput[i] = getCachedFile(Main.class, null, XSL_NAMES[i]);//####[145]####
        }//####[146]####
        longValidationProperties = new Properties();//####[148]####
        try {//####[149]####
            if (!file.exists()) //####[150]####
            {//####[150]####
                file.mkdir();//####[151]####
            }//####[152]####
            longValidationProperties.load(new FileInputStream(validationFileName));//####[153]####
        } catch (IOException e) {//####[154]####
            e.printStackTrace();//####[155]####
        }//####[156]####
        setupTransformers();//####[158]####
        setValidationMode(LONG_VALIDATION_MODE);//####[160]####
        setLoopMode(SINGLE_LOOP_MODE);//####[161]####
        shortValidationProperties = new Properties[Launch.currentNumberBmThreads][INPUT_PAIR][3];//####[163]####
        Main main = new Main(new BenchmarkResult(), 1);//####[165]####
        main.harnessMain();//####[166]####
        int threads = Launch.currentNumberBmThreads;//####[167]####
        setValidationMode(SHORT_VALIDATION_MODE);//####[172]####
        setLoopMode(MULTIPLE_LOOP_MODE);//####[173]####
    }//####[174]####
//####[176]####
    public static void tearDownBenchmark() {//####[176]####
        if (!ExtOutputStream.wasFullVerificationError && !Util.getBoolProperty(Constants.XML_TRANSFORM_LEAVE_OUT_DIR_PROP, null)) //####[177]####
        {//####[178]####
            remove(new File(OUT_DIR));//####[179]####
        }//####[180]####
    }//####[181]####
//####[184]####
    private static void setupTransformers() {//####[184]####
        allTransformers = new Transformer[Launch.currentNumberBmThreads][INPUT_PAIR][];//####[185]####
        try {//####[186]####
            TransformerFactory transformerFactory = TransformerFactory.newInstance();//####[187]####
            for (int i = 0; i < INPUT_PAIR; i++) //####[188]####
            {//####[188]####
                Templates precompiledTemplates = transformerFactory.newTemplates(xslInput[i].asNewStreamSource());//####[189]####
                for (int j = 0; j < Launch.currentNumberBmThreads; j++) //####[191]####
                {//####[191]####
                    Transformer[] transformerForLoops = new Transformer[THREADSNUM];//####[192]####
                    for (int k = 0; k < THREADSNUM; k++) //####[193]####
                    {//####[193]####
                        transformerForLoops[k] = precompiledTemplates.newTransformer();//####[194]####
                    }//####[195]####
                    allTransformers[j][i] = transformerForLoops;//####[196]####
                }//####[197]####
            }//####[198]####
        } catch (TransformerConfigurationException e) {//####[200]####
            e.printStackTrace();//####[201]####
        } catch (IOException e) {//####[202]####
            e.printStackTrace();//####[203]####
        }//####[204]####
    }//####[205]####
//####[207]####
    private Transformer[][] precompiledTransformers;//####[207]####
//####[209]####
    private StreamResult streamResult;//####[209]####
//####[211]####
    public Main(BenchmarkResult bmResult, int threadId) {//####[211]####
        super(bmResult, threadId);//####[212]####
        this.threadId = threadId;//####[213]####
        precompiledTransformers = allTransformers[threadId - 1];//####[223]####
    }//####[224]####
//####[226]####
    public void harnessMain() {//####[226]####
        try {//####[227]####
            for (int i = 0; i < 3; i++) //####[230]####
            {//####[230]####
                executeWorkload();//####[233]####
            }//####[234]####
        } catch (Exception e) {//####[241]####
            e.printStackTrace(Context.getOut());//####[242]####
        }//####[243]####
    }//####[244]####
//####[251]####
    public static void main(String[] args) throws Exception {//####[251]####
        long start = System.currentTimeMillis();//####[252]####
        runSimple(Main.class, args);//####[253]####
        long time = System.currentTimeMillis() - start;//####[254]####
        System.out.println("Parallel xml transform has taken  " + (time / 1000.0) + " seconds.");//####[255]####
    }//####[256]####
//####[262]####
    private Properties getOutProperties(BaseOutputStream outputStream) {//####[262]####
        if (outputStream instanceof ExtOutputStream) //####[263]####
        {//####[263]####
            return ((ExtOutputStream) outputStream).getOutProperties();//####[264]####
        }//####[265]####
        return null;//####[266]####
    }//####[267]####
//####[269]####
    private void executeWorkload() throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[270]####
        TaskIDGroup g;//####[272]####
        g = new TaskIDGroup(INPUT_PAIR);//####[273]####
        for (int i = 0; i < INPUT_PAIR; i++) //####[274]####
        {//####[274]####
            String propertyNamePrefix = XML_NAMES[i] + ".";//####[275]####
            int loops = (getLoopMode() == SINGLE_LOOP_MODE) ? 1 : Main.loops[i];//####[276]####
            Transformer[] transformer = precompiledTransformers[i];//####[280]####
            TaskID id = doTransform(loops, xmlInput[i], transformer[i], propertyNamePrefix, i);//####[284]####
            g.add(id);//####[285]####
        }//####[287]####
        try {//####[288]####
            g.waitTillFinished();//####[289]####
        } catch (Exception e) {//####[290]####
            e.printStackTrace();//####[291]####
        }//####[292]####
    }//####[293]####
//####[295]####
    private static volatile Method __pt__doTransform_int_CachedFile_Transformer_String_int_method = null;//####[295]####
    private synchronized static void __pt__doTransform_int_CachedFile_Transformer_String_int_ensureMethodVarSet() {//####[295]####
        if (__pt__doTransform_int_CachedFile_Transformer_String_int_method == null) {//####[295]####
            try {//####[295]####
                __pt__doTransform_int_CachedFile_Transformer_String_int_method = ParaTaskHelper.getDeclaredMethod(new ParaTaskHelper.ClassGetter().getCurrentClass(), "__pt__doTransform", new Class[] {//####[295]####
                    int.class, CachedFile.class, Transformer.class, String.class, int.class//####[295]####
                });//####[295]####
            } catch (Exception e) {//####[295]####
                e.printStackTrace();//####[295]####
            }//####[295]####
        }//####[295]####
    }//####[295]####
    private TaskID<Void> doTransform(Object loops, Object xmlInput, Object transformer, Object propertyNamePrefix, Object INPUT_PAIR_num) throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[296]####
        //-- execute asynchronously by enqueuing onto the taskpool//####[296]####
        return doTransform(loops, xmlInput, transformer, propertyNamePrefix, INPUT_PAIR_num, new TaskInfo());//####[296]####
    }//####[296]####
    private TaskID<Void> doTransform(Object loops, Object xmlInput, Object transformer, Object propertyNamePrefix, Object INPUT_PAIR_num, TaskInfo taskinfo) throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[296]####
        // ensure Method variable is set//####[296]####
        if (__pt__doTransform_int_CachedFile_Transformer_String_int_method == null) {//####[296]####
            __pt__doTransform_int_CachedFile_Transformer_String_int_ensureMethodVarSet();//####[296]####
        }//####[296]####
        List<Integer> __pt__taskIdIndexList = new ArrayList<Integer>();//####[296]####
        List<Integer> __pt__queueIndexList = new ArrayList<Integer>();//####[296]####
        if (loops instanceof BlockingQueue) {//####[296]####
            __pt__queueIndexList.add(0);//####[296]####
        }//####[296]####
        if (loops instanceof TaskID) {//####[296]####
            taskinfo.addDependsOn((TaskID)loops);//####[296]####
            __pt__taskIdIndexList.add(0);//####[296]####
        }//####[296]####
        if (xmlInput instanceof BlockingQueue) {//####[296]####
            __pt__queueIndexList.add(1);//####[296]####
        }//####[296]####
        if (xmlInput instanceof TaskID) {//####[296]####
            taskinfo.addDependsOn((TaskID)xmlInput);//####[296]####
            __pt__taskIdIndexList.add(1);//####[296]####
        }//####[296]####
        if (transformer instanceof BlockingQueue) {//####[296]####
            __pt__queueIndexList.add(2);//####[296]####
        }//####[296]####
        if (transformer instanceof TaskID) {//####[296]####
            taskinfo.addDependsOn((TaskID)transformer);//####[296]####
            __pt__taskIdIndexList.add(2);//####[296]####
        }//####[296]####
        if (propertyNamePrefix instanceof BlockingQueue) {//####[296]####
            __pt__queueIndexList.add(3);//####[296]####
        }//####[296]####
        if (propertyNamePrefix instanceof TaskID) {//####[296]####
            taskinfo.addDependsOn((TaskID)propertyNamePrefix);//####[296]####
            __pt__taskIdIndexList.add(3);//####[296]####
        }//####[296]####
        if (INPUT_PAIR_num instanceof BlockingQueue) {//####[296]####
            __pt__queueIndexList.add(4);//####[296]####
        }//####[296]####
        if (INPUT_PAIR_num instanceof TaskID) {//####[296]####
            taskinfo.addDependsOn((TaskID)INPUT_PAIR_num);//####[296]####
            __pt__taskIdIndexList.add(4);//####[296]####
        }//####[296]####
        int[] __pt__queueIndexArray = new int[__pt__queueIndexList.size()];//####[296]####
        for (int __pt__i = 0; __pt__i < __pt__queueIndexArray.length; __pt__i++) {//####[296]####
            __pt__queueIndexArray[__pt__i] = __pt__queueIndexList.get(__pt__i);//####[296]####
        }//####[296]####
        taskinfo.setQueueArgIndexes(__pt__queueIndexArray);//####[296]####
        if (__pt__queueIndexArray.length > 0) {//####[296]####
            taskinfo.setIsPipeline(true);//####[296]####
        }//####[296]####
        int[] __pt__taskIdIndexArray = new int[__pt__taskIdIndexList.size()];//####[296]####
        for (int __pt__i = 0; __pt__i < __pt__taskIdIndexArray.length; __pt__i++) {//####[296]####
            __pt__taskIdIndexArray[__pt__i] = __pt__taskIdIndexList.get(__pt__i);//####[296]####
        }//####[296]####
        taskinfo.setTaskIdArgIndexes(__pt__taskIdIndexArray);//####[296]####
        taskinfo.setParameters(loops, xmlInput, transformer, propertyNamePrefix, INPUT_PAIR_num);//####[296]####
        taskinfo.setMethod(__pt__doTransform_int_CachedFile_Transformer_String_int_method);//####[296]####
        taskinfo.setInstance(this);//####[296]####
        return TaskpoolFactory.getTaskpool().enqueue(taskinfo);//####[296]####
    }//####[296]####
    public void __pt__doTransform(int loops, CachedFile xmlInput, Transformer transformer, String propertyNamePrefix, int INPUT_PAIR_num) throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[296]####
        for (int j = loops - 1; j >= 0; j--) //####[299]####
        {//####[299]####
            transform(transformer, createSaxSource(xmlInput), propertyNamePrefix + "SAX", j, INPUT_PAIR_num);//####[300]####
            transform(transformer, createDomSource(xmlInput), propertyNamePrefix + "DOM", j, INPUT_PAIR_num);//####[301]####
            transform(transformer, xmlInput.asNewStreamSource(), propertyNamePrefix + "Stream", j, INPUT_PAIR_num);//####[302]####
        }//####[303]####
    }//####[326]####
//####[326]####
//####[328]####
    private static volatile Method __pt__doTransformTask_int_CachedFile_Transformer_String_int_method = null;//####[328]####
    private synchronized static void __pt__doTransformTask_int_CachedFile_Transformer_String_int_ensureMethodVarSet() {//####[328]####
        if (__pt__doTransformTask_int_CachedFile_Transformer_String_int_method == null) {//####[328]####
            try {//####[328]####
                __pt__doTransformTask_int_CachedFile_Transformer_String_int_method = ParaTaskHelper.getDeclaredMethod(new ParaTaskHelper.ClassGetter().getCurrentClass(), "__pt__doTransformTask", new Class[] {//####[328]####
                    int.class, CachedFile.class, Transformer.class, String.class, int.class//####[328]####
                });//####[328]####
            } catch (Exception e) {//####[328]####
                e.printStackTrace();//####[328]####
            }//####[328]####
        }//####[328]####
    }//####[328]####
    private TaskID<Void> doTransformTask(Object loops, Object xmlInput, Object transformer, Object propertyNamePrefix, Object INPUT_PAIR_num) throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[329]####
        //-- execute asynchronously by enqueuing onto the taskpool//####[329]####
        return doTransformTask(loops, xmlInput, transformer, propertyNamePrefix, INPUT_PAIR_num, new TaskInfo());//####[329]####
    }//####[329]####
    private TaskID<Void> doTransformTask(Object loops, Object xmlInput, Object transformer, Object propertyNamePrefix, Object INPUT_PAIR_num, TaskInfo taskinfo) throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[329]####
        // ensure Method variable is set//####[329]####
        if (__pt__doTransformTask_int_CachedFile_Transformer_String_int_method == null) {//####[329]####
            __pt__doTransformTask_int_CachedFile_Transformer_String_int_ensureMethodVarSet();//####[329]####
        }//####[329]####
        List<Integer> __pt__taskIdIndexList = new ArrayList<Integer>();//####[329]####
        List<Integer> __pt__queueIndexList = new ArrayList<Integer>();//####[329]####
        if (loops instanceof BlockingQueue) {//####[329]####
            __pt__queueIndexList.add(0);//####[329]####
        }//####[329]####
        if (loops instanceof TaskID) {//####[329]####
            taskinfo.addDependsOn((TaskID)loops);//####[329]####
            __pt__taskIdIndexList.add(0);//####[329]####
        }//####[329]####
        if (xmlInput instanceof BlockingQueue) {//####[329]####
            __pt__queueIndexList.add(1);//####[329]####
        }//####[329]####
        if (xmlInput instanceof TaskID) {//####[329]####
            taskinfo.addDependsOn((TaskID)xmlInput);//####[329]####
            __pt__taskIdIndexList.add(1);//####[329]####
        }//####[329]####
        if (transformer instanceof BlockingQueue) {//####[329]####
            __pt__queueIndexList.add(2);//####[329]####
        }//####[329]####
        if (transformer instanceof TaskID) {//####[329]####
            taskinfo.addDependsOn((TaskID)transformer);//####[329]####
            __pt__taskIdIndexList.add(2);//####[329]####
        }//####[329]####
        if (propertyNamePrefix instanceof BlockingQueue) {//####[329]####
            __pt__queueIndexList.add(3);//####[329]####
        }//####[329]####
        if (propertyNamePrefix instanceof TaskID) {//####[329]####
            taskinfo.addDependsOn((TaskID)propertyNamePrefix);//####[329]####
            __pt__taskIdIndexList.add(3);//####[329]####
        }//####[329]####
        if (INPUT_PAIR_num instanceof BlockingQueue) {//####[329]####
            __pt__queueIndexList.add(4);//####[329]####
        }//####[329]####
        if (INPUT_PAIR_num instanceof TaskID) {//####[329]####
            taskinfo.addDependsOn((TaskID)INPUT_PAIR_num);//####[329]####
            __pt__taskIdIndexList.add(4);//####[329]####
        }//####[329]####
        int[] __pt__queueIndexArray = new int[__pt__queueIndexList.size()];//####[329]####
        for (int __pt__i = 0; __pt__i < __pt__queueIndexArray.length; __pt__i++) {//####[329]####
            __pt__queueIndexArray[__pt__i] = __pt__queueIndexList.get(__pt__i);//####[329]####
        }//####[329]####
        taskinfo.setQueueArgIndexes(__pt__queueIndexArray);//####[329]####
        if (__pt__queueIndexArray.length > 0) {//####[329]####
            taskinfo.setIsPipeline(true);//####[329]####
        }//####[329]####
        int[] __pt__taskIdIndexArray = new int[__pt__taskIdIndexList.size()];//####[329]####
        for (int __pt__i = 0; __pt__i < __pt__taskIdIndexArray.length; __pt__i++) {//####[329]####
            __pt__taskIdIndexArray[__pt__i] = __pt__taskIdIndexList.get(__pt__i);//####[329]####
        }//####[329]####
        taskinfo.setTaskIdArgIndexes(__pt__taskIdIndexArray);//####[329]####
        taskinfo.setParameters(loops, xmlInput, transformer, propertyNamePrefix, INPUT_PAIR_num);//####[329]####
        taskinfo.setMethod(__pt__doTransformTask_int_CachedFile_Transformer_String_int_method);//####[329]####
        taskinfo.setInstance(this);//####[329]####
        return TaskpoolFactory.getTaskpool().enqueue(taskinfo);//####[329]####
    }//####[329]####
    public void __pt__doTransformTask(int loops, CachedFile xmlInput, Transformer transformer, String propertyNamePrefix, int INPUT_PAIR_num) throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[329]####
        for (int j = loops - 1; j >= 0; j--) //####[330]####
        {//####[330]####
            transform(transformer, createSaxSource(xmlInput), propertyNamePrefix + "SAX", j, INPUT_PAIR_num);//####[331]####
            transform(transformer, createDomSource(xmlInput), propertyNamePrefix + "DOM", j, INPUT_PAIR_num);//####[332]####
            transform(transformer, xmlInput.asNewStreamSource(), propertyNamePrefix + "Stream", j, INPUT_PAIR_num);//####[333]####
        }//####[334]####
    }//####[335]####
//####[335]####
//####[337]####
    private void transform(Transformer transformer, Source source, String descr, int loop, int INPUT_PAIR_num) throws TransformerException, ParserConfigurationException, SAXException, IOException {//####[338]####
        transformer.reset();//####[339]####
        BaseOutputStream outputStream;//####[340]####
        StreamResult streamResult;//####[341]####
        int sourceType = source instanceof SAXSource ? 0 : (source instanceof DOMSource ? 1 : 2);//####[343]####
        if (getValidationMode() == LONG_VALIDATION_MODE) //####[345]####
        {//####[345]####
            outputStream = new ExtOutputStream();//####[346]####
            streamResult = new StreamResult(outputStream);//####[347]####
            outputStream.setValidationProperties(longValidationProperties);//####[348]####
        } else {//####[349]####
            outputStream = new BaseOutputStream();//####[350]####
            streamResult = new StreamResult(outputStream);//####[351]####
            outputStream.setValidationProperties(shortValidationProperties[threadId - 1][INPUT_PAIR_num][sourceType]);//####[352]####
        }//####[353]####
        outputStream.setCurrentProp(descr);//####[355]####
        transformer.transform(source, streamResult);//####[356]####
        outputStream.checkResult(loop);//####[357]####
        if ((getValidationMode() == LONG_VALIDATION_MODE) && (outputStream instanceof ExtOutputStream)) //####[359]####
        {//####[359]####
            int threads = Launch.currentNumberBmThreads;//####[360]####
            Properties outProperties = getOutProperties(outputStream);//####[361]####
            for (int i = 0; i < threads; i++) //####[362]####
            {//####[362]####
                shortValidationProperties[i][INPUT_PAIR_num][sourceType] = (Properties) outProperties.clone();//####[363]####
            }//####[364]####
        }//####[365]####
    }//####[367]####
}//####[367]####
